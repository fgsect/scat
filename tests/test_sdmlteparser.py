#!/usr/bin/env python3

import unittest
import binascii

from scat.parsers.samsung.sdmlteparser import SdmLteParser
from scat.parsers.samsung import sdmcmd

class TestSdmLteParser(unittest.TestCase):
    parser = SdmLteParser(parent=None, icd_ver=(6, 22))

    def test_sdm_lte_phy_cell_info(self):
        self.parser.icd_ver = (4, 80)
        payload = binascii.unhexlify('7f3c0000390087ffa002020b418b35d0af0000000000000e067b010000ecc850fb14370000d007000001000e0615010000bc1bcc290000a406000000007e')
        result = self.parser.sdm_lte_phy_cell_info(payload)
        expected = 'LTE PHY Cell Info: EARFCN: 1550, PCI: 379, PLMN: 45008, RSRP: -141.00, RSRQ: -20.00\nLTE PHY Cell Info: NCell 0: EARFCN: 1550, PCI: 277, RSRP: -107.00, RSRQ: -17.00'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('7f290000260020ffa00202f7f42335d0af0000000000000e067b0100007ce370fea028000078050000007e')
        result = self.parser.sdm_lte_phy_cell_info(payload)
        expected = 'LTE PHY Cell Info: EARFCN: 1550, PCI: 379, PLMN: 45008, RSRP: -104.00, RSRQ: -14.00'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('7f2900002600265ca00202f15b1b22ceaf00000000000032000b0000005ce084036829000058020000007e')
        result = self.parser.sdm_lte_phy_cell_info(payload)
        expected = 'LTE PHY Cell Info: EARFCN: 50, PCI: 11, PLMN: 45006, RSRP: -106.00, RSRQ: -6.00'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('5a66000000000000220b70010000ccde20035c2b0000f40100000200220be2000000fc21502d000084030000000000220b9f000000c422182e0000200300000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_NCELL_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_info(packet)
        expected = '''LTE PHY Cell Info: EARFCN: 2850, PCI: 368, PLMN: 26202, RSRP: -111.00, RSRQ: -5.00
LTE PHY Cell Info: NCell 0: EARFCN: 2850, PCI: 226, RSRP: -116.00, RSRQ: -9.00
LTE PHY Cell Info: NCell 1: EARFCN: 2850, PCI: 159, RSRP: -118.00, RSRQ: -8.00'''
        self.assertEqual(result['stdout'], expected)

        self.parser.icd_ver = (6, 22)
        payload = binascii.unhexlify('ceaf000000000000640000000b00000050e21405d8270000e803000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_NCELL_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_info(packet)
        expected = 'LTE PHY Cell Info: EARFCN: 100, PCI: 11, PLMN: 45006, RSRP: -102.00, RSRQ: -10.00'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('ceaf000000000000640000000b00000018e37805d8270000e80300000102ea0b00000b0000007017c4220000840300000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_NCELL_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_info(packet)
        expected = '''LTE PHY Cell Info: EARFCN: 100, PCI: 11, PLMN: 45006, RSRP: -102.00, RSRQ: -10.00
LTE PHY Cell Info: NCell 0 (Type 2): ARFCN: 3050, PCI: 11, RSRP: -89.00, RSRQ: -9.00'''
        self.assertEqual(result['stdout'], expected)

        self.parser.icd_ver = (7, 0)
        payload = binascii.unhexlify('5966000000000000140500000001000070e57cfc68290000a40600000500f401000041000000901a8025000020030000000000a50e0000da010000a816a41f00005802000000000000190000ac000000f811bc1b000058020000000003000000001f0000003818381800004480ffff0000030000000038000000d020d02000004480ffff0000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_NCELL_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_info(packet)
        expected = '''LTE PHY Cell Info: EARFCN: 1300, PCI: 256, PLMN: 26201, RSRP: -106.00, RSRQ: -17.00
LTE PHY Cell Info: NCell 0: EARFCN: 500, PCI: 65, RSRP: -96.00, RSRQ: -8.00
LTE PHY Cell Info: NCell 1: EARFCN: 3749, PCI: 474, RSRP: -81.00, RSRQ: -6.00
LTE PHY Cell Info: NCell 2: EARFCN: 6400, PCI: 172, RSRP: -71.00, RSRQ: -6.00
LTE PHY Cell Info: NCell 3 (GSM): ARFCN: 0, BSIC: 31, RSRP: -62.00, RSRQ: -327.00
LTE PHY Cell Info: NCell 4 (GSM): ARFCN: 0, BSIC: 56, RSRP: -84.00, RSRQ: -327.00'''
        self.assertEqual(result['stdout'], expected)

        self.parser.icd_ver = (8, 0)
        payload = binascii.unhexlify('5966000000000000140500000500000018e35802cc29000084030000030214050000030000004c1d5c2b00004c040000000002a40500005d000000141e5c2b0000b0040000000002a50e000021000000e81ca02800004c0400000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_NCELL_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_info(packet)
        expected = '''LTE PHY Cell Info: EARFCN: 1300, PCI: 5, PLMN: 26201, RSRP: -107.00, RSRQ: -9.00
LTE PHY Cell Info: NCell 0: EARFCN: 1300, PCI: 3, RSRP: -111.00, RSRQ: -11.00
LTE PHY Cell Info: NCell 1: EARFCN: 1444, PCI: 93, RSRP: -111.00, RSRQ: -12.00
LTE PHY Cell Info: NCell 2: EARFCN: 3749, PCI: 33, RSRP: -104.00, RSRQ: -11.00'''
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('5966000000000000140500000500000088e1f401302a00008403000004021405000003000000b01d5c2b000014050000000002a40500005d000000a41f5c2b000014050000000002a50e000021000000201c3c280000b0040000000006de930600dc0300006c205c2b0000140500000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_NCELL_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_info(packet)
        expected = '''LTE PHY Cell Info: EARFCN: 1300, PCI: 5, PLMN: 26201, RSRP: -108.00, RSRQ: -9.00
LTE PHY Cell Info: NCell 0: EARFCN: 1300, PCI: 3, RSRP: -111.00, RSRQ: -13.00
LTE PHY Cell Info: NCell 1: EARFCN: 1444, PCI: 93, RSRP: -111.00, RSRQ: -13.00
LTE PHY Cell Info: NCell 2: EARFCN: 3749, PCI: 33, RSRP: -103.00, RSRQ: -12.00
LTE PHY Cell Info: NCell 3 (NR): NR-ARFCN: 431070, PCI: 988, RSRP: -111.00, RSRQ: -13.00'''
        self.assertEqual(result['stdout'], expected)

    def test_sdm_lte_phy_cell_search_meas(self):
        self.parser.icd_ver = (4, 36)
        payload = binascii.unhexlify('7b0100000000b8240000f40100002c1a00001c25000058020000bc1b0000000000000000000000000000000000000000000000000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_CELL_SEARCH_MEAS, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_search_meas(packet)
        expected = '''LTE PHY Cell Search Measure: SCell: PCI: 379, RSRP/RSRQ/RSSI: (-94.0, -5.0, -67.0), (-95.0, -6.0, -71.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)'''
        self.assertEqual(result['stdout'], expected)

        self.parser.icd_ver = (4, 40)
        payload = binascii.unhexlify('7b010000000014370000d00700001437000014370000d007000014370000000000000000000000000000000000000000000000000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_CELL_SEARCH_MEAS, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_search_meas(packet)
        expected = '''LTE PHY Cell Search Measure: SCell: PCI: 379, RSRP/RSRQ/RSSI: (-141.0, -20.0, -141.0), (-141.0, -20.0, -141.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)'''
        self.assertEqual(result['stdout'], expected)

        self.parser.icd_ver = (4, 60)
        payload = binascii.unhexlify('0b00000000003c28000058020000401f0000a0280000900100006c200000000000000000000000000000000000000000000000000000000000000601800958410000050000000000000000a4010000e5f4ffffd5f4ffff')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_CELL_SEARCH_MEAS, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_search_meas(packet)
        expected = '''LTE PHY Cell Search Measure: SCell: PCI: 11, RSRP/RSRQ/RSSI: (-103.0, -6.0, -80.0), (-104.0, -4.0, -83.0), (0.0, 0.0, 0.0), (0.0, 0.0, 0.0)'''
        self.assertEqual(result['stdout'], expected)

        self.parser.icd_ver = (5, 17)
        payload = binascii.unhexlify('240000000000ec2c000078050000a41f000010270000e8030000bc1b0000b04f0000a00f0000b04f0000b04f0000a00f0000b04f000000000000000000000000002a2543d42a2543f753354100000000000000002c000000ffffff0200000004000000000000000000000000000000000000000000000000000000000000000050c72b452200000014e89b41c407000071d3a140d700034302000000cb0000004300000040108004000000002200000000000000c4070000ef7300047c0000007462274540108004000000002200000000000000c4070000ef73000464000000ccee2b452200000014e89b41c407000071d3a1406400034302000000580000001000000001000000d00703436537fc4000000000020000004d73f840000000005ce79b4140108004000000002200000000000000c4070000ef7300041200000030ef2b452200000014e89b41c407000071d3a1401200034302000000060000000000000001000000300803436537fc4000000000020000004d73f840000000005ce79b417c061d43fd061d4311071d4300068114620000005886e44600204000000000000a000000080000004114040098bacdfe')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_CELL_SEARCH_MEAS, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_search_meas(packet)
        expected = '''LTE PHY Cell Search Measure: SCell: PCI: 36, RSRP/RSRQ/RSSI: (-115.0, -14.0, -81.0), (-100.0, -10.0, -71.0), (-204.0, -40.0, -204.0), (-204.0, -40.0, -204.0)'''
        self.assertEqual(result['stdout'], expected)

        self.parser.icd_ver = (7, 1)
        payload = binascii.unhexlify('050000000000302a000020030000dc1e0000a0280000b0040000201c0000b04f0000a00f0000b04f0000b04f0000a00f0000b04f0000020000005e000000000004290000bc02000008200000302a000078050000b01d0000b04f0000a00f0000b04f0000b04f0000a00f0000b04f0000230000000000ac260000e8030000841c000010270000e8030000841c0000b04f0000a00f0000b04f0000b04f0000a00f0000b04f
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_CELL_SEARCH_MEAS, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_search_meas(packet)
        expected = '''LTE PHY Cell Search Measure: SCell: PCI: 5, RSRP/RSRQ/RSSI: (-108.0, -8.0, -79.0), (-104.0, -12.0, -72.0), (-204.0, -40.0, -204.0), (-204.0, -40.0, -204.0)
LTE PHY Cell Search Measure: NCell 0: PCI: 94, RSRP/RSRQ/RSSI: (-105.0, -7.0, -82.0), (-108.0, -14.0, -76.0), (-204.0, -40.0, -204.0), (-204.0, -40.0, -204.0)
LTE PHY Cell Search Measure: NCell 1: PCI: 35, RSRP/RSRQ/RSSI: (-99.0, -10.0, -73.0), (-100.0, -10.0, -73.0), (-204.0, -40.0, -204.0), (-204.0, -40.0, -204.0)'''
        self.assertEqual(result['stdout'], expected)

        self.parser.icd_ver = (8, 0)
        payload = binascii.unhexlify('0500000000006829000020030000781e0000682900004c0400004c1d0000b04f0000a00f0000b04f0000b04f0000a00f0000b04f
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_CELL_SEARCH_MEAS, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_search_meas(packet)
        expected = '''LTE PHY Cell Search Measure: SCell: PCI: 5, RSRP/RSRQ/RSSI: (-106.0, -8.0, -78.0), (-106.0, -11.0, -75.0), (-204.0, -40.0, -204.0), (-204.0, -40.0, -204.0)'''
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('050000000000182e0000e8030000602200001027000020030000201c000004420000b80b0000f03c0000684200001c0c0000543d0000030000005e0000000000882c000084030000602200003c28000084030000141e0000b04f0000a00f0000b04f0000b04f0000a00f0000b04f000023000000000074270000840300004c1d0000e425000058020000e81c0000b04f0000a00f0000b04f0000b04f0000a00f0000b04f0000590000000000b42d0000b004000034210000c02b00005802000098210000b04f0000a00f0000b04f0000b04f0000a00f0000b04f
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_PHY_CELL_SEARCH_MEAS, payload, timestamp=0x0)
        result = self.parser.sdm_lte_phy_cell_search_meas(packet)
        expected = '''LTE PHY Cell Search Measure: SCell: PCI: 5, RSRP/RSRQ/RSSI: (-118.0, -10.0, -88.0), (-100.0, -8.0, -72.0), (-169.0, -30.0, -156.0), (-170.0, -31.0, -157.0)
LTE PHY Cell Search Measure: NCell 0: PCI: 94, RSRP/RSRQ/RSSI: (-114.0, -9.0, -88.0), (-103.0, -9.0, -77.0), (-204.0, -40.0, -204.0), (-204.0, -40.0, -204.0)
LTE PHY Cell Search Measure: NCell 1: PCI: 35, RSRP/RSRQ/RSSI: (-101.0, -9.0, -75.0), (-97.0, -6.0, -74.0), (-204.0, -40.0, -204.0), (-204.0, -40.0, -204.0)
LTE PHY Cell Search Measure: NCell 2: PCI: 89, RSRP/RSRQ/RSSI: (-117.0, -12.0, -85.0), (-112.0, -6.0, -86.0), (-204.0, -40.0, -204.0), (-204.0, -40.0, -204.0)'''
        self.assertEqual(result['stdout'], expected)

    def test_sdm_lte_l2_rnti_info(self):
        self.parser.icd_ver = (4, 60)
        payload = binascii.unhexlify('7f1a00001700f308a1223a4dd70803fffffefff4ff95ea0200f4ff7e')
        result = self.parser.sdm_lte_l2_rnti_info(payload)
        expected = {'stdout': 'LTE L2 RNTI Info: SI: 0xffff P: 0xfffe TC: 0xfff4 C: 0xea95 RA: 0x2 0xfff4'}
        self.assertDictEqual(result, expected)

    def test_sdm_lte_rrc_serving_cell(self):
        self.parser.icd_ver = (4, 60)
        payload = binascii.unhexlify('7f2000001d00fe5ba0025092190c22110692000100000000000000ceaf000090017e')
        result = self.parser.sdm_lte_rrc_serving_cell(payload)
        expected = 'LTE RRC Serving Cell: PLMN: 45006, xTAC/xCID: 9001/920611'
        self.assertEqual(result['stdout'], expected)

    def test_sdm_lte_rrc_state(self):
        self.parser.icd_ver = (6, 22)
        payload = binascii.unhexlify('7f0f00000c002bffa00251f4c3882e007e')
        result = self.parser.sdm_lte_rrc_state(payload)
        expected = 'LTE RRC State: IDLE'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('7f0f00000c0033ffa00251de00892e017e')
        result = self.parser.sdm_lte_rrc_state(payload)
        expected = 'LTE RRC State: CONNECTING'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('7f0f00000c0050ffa00251de8b892e027e')
        result = self.parser.sdm_lte_rrc_state(payload)
        expected = 'LTE RRC State: CONNECTED'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('7f0f00000c0050ffa00251de8b892e037e')
        result = self.parser.sdm_lte_rrc_state(payload)
        expected = 'LTE RRC State: UNKNOWN'
        self.assertEqual(result['stdout'], expected)

    def test_sdm_lte_rrc_ota_packet(self):
        # PCCH
        self.parser.icd_ver = (6, 22)
        payload = binascii.unhexlify('7f1900001600bbffa00252701ebd2f0100070040031e080597e07e')
        result = self.parser.sdm_lte_rrc_ota_packet(payload)
        expected = {
            'layer': 'rrc',
            'cp': [binascii.unhexlify('02040d0000000000000000000600000040031e080597e0')],
        }
        self.assertDictEqual(result, expected)

        # BCCH DL SCH
        payload = binascii.unhexlify('7f1b0000180061ffa002529ca0892e03000900001101a8f200034f217e')
        result = self.parser.sdm_lte_rrc_ota_packet(payload)
        expected = {
            'layer': 'rrc',
            'cp': [binascii.unhexlify('02040d00000000000000000005000000001101a8f200034f21')],
        }
        self.assertDictEqual(result, expected)

        # UL CCCH
        payload = binascii.unhexlify('7f180000150034ffa002523f10892e0001060051793604aaa67e')
        result = self.parser.sdm_lte_rrc_ota_packet(payload)
        expected = {
            'layer': 'rrc',
            'cp': [binascii.unhexlify('02040d0000000000000000000200000051793604aaa6')],
        }
        self.assertDictEqual(result, expected)

        # DL CCCH
        payload = binascii.unhexlify('7f2b000028004fffa00252de79892e0000190070129813fd94049b7065972ae10c3ece0587600250d08c43007e')
        result = self.parser.sdm_lte_rrc_ota_packet(payload)
        expected = {
            'layer': 'rrc',
            'cp': [binascii.unhexlify('02040d0000000000000000000000000070129813fd94049b7065972ae10c3ece0587600250d08c4300')],
        }
        self.assertDictEqual(result, expected)
        # UL DCCH
        payload = binascii.unhexlify('7f1f00001c0043ffa00252d1cbd72f04010d00480144fd96b7b0e7fcfc5a61607e')
        result = self.parser.sdm_lte_rrc_ota_packet(payload)
        expected = {
            'layer': 'rrc',
            'cp': [binascii.unhexlify('02040d00000000000000000003000000480144fd96b7b0e7fcfc5a6160')],
        }
        self.assertDictEqual(result, expected)

        # DL DCCH
        payload = binascii.unhexlify('7f2200001f0044ffa002526d4fd82f040010002206005139404663f96ceb25e77880187e')
        result = self.parser.sdm_lte_rrc_ota_packet(payload)
        expected = {
            'layer': 'rrc',
            'cp': [binascii.unhexlify('02040d000000000000000000010000002206005139404663f96ceb25e7788018')],
        }
        self.assertDictEqual(result, expected)

    def test_sdm_lte_rrc_rach_message(self):
        payload = binascii.unhexlify('0101000d000000050000008f360000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_RRC_RACH_MSG, payload, timestamp=0x0)
        result = self.parser.sdm_lte_rrc_rach_msg(packet)
        expected = {'stdout': 'LTE RRC RACH Message: Direction: 1, Cause: 1, Preamble Group: 0x0, Preamble ID: 0xd, TA: 5, TC-RNTI: 0x368f'}
        self.assertDictEqual(result, expected)

    def test_sdm_lte_volte_rtp_packet(self):
        payload = binascii.unhexlify('4a00621b80fe01004001000011cbe2f5')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_RX_PACKET_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_rtp_packet(packet, 0x70)
        expected = 'LTE VoLTE RTP Packet: Dst Port: 7010, Length: 74, Header=128, PT=254, SSRC=0xf5e2cb11, Seq=1, Time=320'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('4a00961580fe0100400100003d24d539')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_TX_PACKET_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_rtp_packet(packet, 0x71)
        expected = 'LTE VoLTE RTP Packet: Dst Port: 5526, Length: 74, Header=128, PT=254, SSRC=0x39d5243d, Seq=1, Time=320'
        self.assertEqual(result['stdout'], expected)

    def test_sdm_lte_volte_tx_stats(self):
        payload = binascii.unhexlify('7e3d24d539961501002a0108f00400052300000000000000090c170000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_TX_OVERALL_STAT_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_tx_stats(packet)
        expected = 'LTE VoLTE TX Stats: IP: 2a01:8f0:400:523::9, Dst Port: 5526, PT=126, SSRC=0x39d5243d, 5.90s'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('00fca4c3c3ba2a00000a89dd1200000000000000000000000000000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_TX_OVERALL_STAT_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_tx_stats(packet)
        expected = 'LTE VoLTE TX Stats: IP: 10.137.221.18, Dst Port: 10938, PT=0, SSRC=0xc3c3a4fc, 0.00s'
        self.assertEqual(result['stdout'], expected)

    def test_sdm_lte_volte_rx_stats(self):
        payload = binascii.unhexlify('11cbe2f5621b01002a00002060f59e4f4fae585752f89406')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_RX_OVERALL_STAT_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_rx_stats(packet)
        expected = 'LTE VoLTE RX Stats: IP: 2a00:20:60f5:9e4f:4fae:5857:52f8:9406, Dst Port: 7010, SSRC=0xf5e2cb11'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('000000000000ffff00000000000000000000000000000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_RX_OVERALL_STAT_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_rx_stats(packet)
        expected = 'LTE VoLTE RX Stats: IP: Unknown IP type 65535, Dst Port: 0, SSRC=0x00000000'
        self.assertEqual(result['stdout'], expected)

    def test_sdm_lte_volte_tx_rtp_stats(self):
        payload = binascii.unhexlify('ac170000520000002f100000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_TX_RTP_STAT_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_tx_rtp_stats(packet)
        expected = 'LTE VoLTE TX RTP Stats: 6.06s, Num Packets: 82, Num Bytes: 4143'
        self.assertEqual(result['stdout'], expected)

        payload = binascii.unhexlify('2c0600005000000020170000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_TX_RTP_STAT_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_tx_rtp_stats(packet)
        expected = 'LTE VoLTE TX RTP Stats: 1.58s, Num Packets: 80, Num Bytes: 5920'
        self.assertEqual(result['stdout'], expected)

    def test_sdm_lte_volte_rx_rtp_stats(self):
        payload = binascii.unhexlify('0c1700002801000090550000000000000000000000000000700000009c000000a90100004a000000')
        packet = sdmcmd.generate_sdm_packet(0xa0, sdmcmd.sdm_command_group.CMD_LTE_DATA, sdmcmd.sdm_lte_data.LTE_VOLTE_RX_RTP_STAT_INFO, payload, timestamp=0x0)
        result = self.parser.sdm_lte_volte_rx_rtp_stats(packet)
        expected = 'LTE VoLTE RX RTP Stats: 5.90s, Num Packets: 296, Num Bytes: 21904'
        self.assertEqual(result['stdout'], expected)

if __name__ == '__main__':
    unittest.main()